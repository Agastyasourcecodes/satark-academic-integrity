import { GoogleGenerativeAI } from "@google/generative-ai"
import { type NextRequest, NextResponse } from "next/server"

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!)

export async function POST(request: NextRequest) {
  try {
    const { text, type = "ai-detection" } = await request.json()

    if (!text || text.trim().length === 0) {
      return NextResponse.json({ error: "Text is required" }, { status: 400 })
    }

    const model = genAI.getGenerativeModel({ model: "gemini-pro" })

    let prompt = ""

    if (type === "ai-detection") {
      prompt = `Analyze the following text and determine if it was likely generated by AI. Consider factors like:
      - Writing patterns and style consistency
      - Vocabulary complexity and usage
      - Sentence structure and flow
      - Content depth and originality
      - Common AI-generated text markers
      
      Provide a confidence score from 0-100 (where 100 means definitely AI-generated) and a brief explanation.
      
      Text to analyze: "${text}"
      
      Respond in JSON format: {"aiLikelihood": number, "confidence": number, "explanation": "brief explanation", "flags": ["list of specific concerns"]}`
    } else if (type === "plagiarism") {
      prompt = `Analyze this text for potential plagiarism indicators:
      - Generic or overly formal language
      - Inconsistent writing style
      - Lack of personal voice or opinion
      - Overly complex vocabulary for the context
      - Factual statements without personal insight
      
      Text: "${text}"
      
      Respond in JSON format: {"plagiarismRisk": number, "confidence": number, "explanation": "brief explanation", "suggestions": ["improvement suggestions"]}`
    }

    const result = await model.generateContent(prompt)
    const response = await result.response
    const analysisText = response.text()

    // Parse the JSON response from Gemini
    let analysis
    try {
      // Extract JSON from the response (Gemini sometimes adds extra text)
      const jsonMatch = analysisText.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0])
      } else {
        throw new Error("No JSON found in response")
      }
    } catch (parseError) {
      // Fallback if JSON parsing fails
      analysis = {
        aiLikelihood: 50,
        confidence: 30,
        explanation: "Unable to parse AI analysis response",
        flags: ["Analysis error"],
      }
    }

    return NextResponse.json({
      success: true,
      analysis,
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    console.error("AI Detection Error:", error)
    return NextResponse.json({ error: "Failed to analyze text" }, { status: 500 })
  }
}
